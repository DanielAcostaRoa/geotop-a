{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\jo\\\\software-projects\\\\geotop-a\\\\src\\\\views\\\\ListKeywordsPage\\\\Sections\\\\ListKeywordsSection.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // nodejs library that concatenates classes\n\nimport classNames from \"classnames\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\"; // @material-ui/icons\n// core components\n\nimport GridContainer from \"../../../components/Grid/GridContainer.js\";\nimport GridItem from \"../../../components/Grid/GridItem.js\";\nimport styles from \"../../../assets/jss/material-kit-react/views/landingPageSections/teamStyle.js\";\nimport MenuOpen from '@material-ui/icons/MenuOpen';\nimport { db } from '../../../ConfigFirebase';\nconst useStyles = makeStyles(styles);\nexport default function ListSpeakersSection() {\n  _s();\n\n  const classes = useStyles();\n  let keywords_aux = {}; // keywords_aux sera un diccionario indexado por todas las keywords que almacena listas de objetos \n  // del tipo [talk.id, surname, year]\n\n  const [keywords, setKeywords] = useState({});\n  const [keywordsListByLetter, setKeywordsListByLatter] = useState([]);\n  const [lettersInKeywords, setLettersInKeywords] = useState([]);\n  const [visitLetters, setVisitLetters] = useState({});\n  const [speakersById, setSpeakersById] = useState({});\n  useEffect(async () => {\n    var speakers = {};\n    await db.collection('speakers').get().then(function (querySnapshot) {\n      querySnapshot.forEach(async function (doc) {\n        speakers[doc.id] = doc.data().surname;\n      });\n    }).catch(function (error) {\n      alert(\"Some speakers cannot load.\");\n    });\n    await db.collection(\"talks\").get().then(function (querySnapshot) {\n      querySnapshot.forEach(async function (doc) {\n        let keys = doc.data().keywords;\n        let keys_len = keys.length;\n\n        for (let i = 0; i < keys_len; i++) {\n          // Checo si encuentro una keyword nueva\n          if (!(keys[i] in keywords_aux)) {\n            keywords_aux[keys[i]] = [];\n          }\n\n          var idx = doc.data().speaker;\n          keywords_aux[keys[i]].push([doc.id, speakers[idx], doc.data().date.toDate().getFullYear(), doc.data().video]);\n        }\n      });\n    }).catch(function (error) {\n      alert(\"Cannot load some talk\");\n    });\n    setKeywords(keywords_aux);\n  }, []); // Al modificar speakers list con el contenido se actualiza\n\n  useEffect(() => {\n    handleLettersInKeyWords();\n  }, [keywords]); // FunciÃ³n que revisa las letras que existen para hacer listas\n\n  function handleLettersInKeyWords() {\n    let letterSet = new Set();\n    let visitLetters = {};\n    let keywordsWithLetter = {};\n\n    for (var k in keywords) {\n      var letter = k.charAt(0).toUpperCase();\n      letterSet.add(letter);\n      visitLetters[letter] = false;\n      keywordsWithLetter[letter] = [];\n    }\n\n    for (var k in keywords) {\n      var letter = k.charAt(0).toUpperCase();\n      var copy = {};\n      copy[k] = keywords[k];\n      keywordsWithLetter[letter].push(copy);\n    }\n\n    var auxLetterSet = [...letterSet];\n    auxLetterSet.sort();\n    setLettersInKeywords(auxLetterSet);\n    setVisitLetters(visitLetters);\n    setKeywordsListByLatter(keywordsWithLetter);\n  }\n\n  function listWithLetter(letter) {\n    const listItems = keywordsListByLetter[letter].map(keyword => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"h5\", {\n        style: {\n          fontSize: '20px',\n          fontStyle: 'normal'\n        },\n        children: Object.keys(keyword).map(function (k) {\n          let result = '';\n          let first = true;\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [k, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 28\n            }, this), keywords[k].map(data => {\n              return /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [first ? first = false : ',', \" \", data[1], \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n                  href: data[3],\n                  target: \"_blank\",\n                  children: data[2]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 70\n                }, this), \"  \"]\n              }, void 0, true);\n            }), \" \"]\n          }, void 0, true);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        listStyleType: 'none'\n      },\n      children: listItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this);\n  }\n\n  function listAlphabetical() {\n    const listItems = lettersInKeywords.map(letter => /*#__PURE__*/_jsxDEV(\"li\", {\n      style: {\n        listStyleType: 'none'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: classes.title,\n        children: [letter, \" \", /*#__PURE__*/_jsxDEV(MenuOpen, {\n          onClick: onclickLetter.bind(this, letter),\n          style: {\n            cursor: 'pointer'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 34\n        }, this), \" \", visitLetters[letter] ? listWithLetter(letter) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        textAlign: 'left'\n      },\n      children: listItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this);\n  }\n\n  const [count, setCount] = useState(0);\n\n  function onclickLetter(letter) {\n    let newVisit = visitLetters;\n    newVisit[letter] = !newVisit[letter];\n    setVisitLetters(newVisit);\n    setCount(count + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.section,\n    children: listAlphabetical()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ListSpeakersSection, \"C79X4eDcWceuQPCfnHmqHj5clvI=\", false, function () {\n  return [useStyles];\n});\n\n_c = ListSpeakersSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListSpeakersSection\");","map":{"version":3,"sources":["C:/Users/jo/software-projects/geotop-a/src/views/ListKeywordsPage/Sections/ListKeywordsSection.js"],"names":["React","useState","useEffect","classNames","makeStyles","GridContainer","GridItem","styles","MenuOpen","db","useStyles","ListSpeakersSection","classes","keywords_aux","keywords","setKeywords","keywordsListByLetter","setKeywordsListByLatter","lettersInKeywords","setLettersInKeywords","visitLetters","setVisitLetters","speakersById","setSpeakersById","speakers","collection","get","then","querySnapshot","forEach","doc","id","data","surname","catch","error","alert","keys","keys_len","length","i","idx","speaker","push","date","toDate","getFullYear","video","handleLettersInKeyWords","letterSet","Set","keywordsWithLetter","k","letter","charAt","toUpperCase","add","copy","auxLetterSet","sort","listWithLetter","listItems","map","keyword","fontSize","fontStyle","Object","result","first","listStyleType","listAlphabetical","title","onclickLetter","bind","cursor","textAlign","count","setCount","newVisit","section"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\n// nodejs library that concatenates classes\r\nimport classNames from \"classnames\";\r\n// @material-ui/core components\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\n// @material-ui/icons\r\n\r\n// core components\r\nimport GridContainer from \"../../../components/Grid/GridContainer.js\";\r\nimport GridItem from \"../../../components/Grid/GridItem.js\";\r\n\r\nimport styles from \"../../../assets/jss/material-kit-react/views/landingPageSections/teamStyle.js\";\r\nimport MenuOpen from '@material-ui/icons/MenuOpen';\r\n\r\nimport {db} from '../../../ConfigFirebase';\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nexport default function     ListSpeakersSection(){\r\n    const classes = useStyles();\r\n    let keywords_aux = {};\r\n    // keywords_aux sera un diccionario indexado por todas las keywords que almacena listas de objetos \r\n    // del tipo [talk.id, surname, year]\r\n\r\n    const [keywords, setKeywords] = useState({});\r\n    const [keywordsListByLetter,setKeywordsListByLatter] = useState([]);\r\n    const [lettersInKeywords, setLettersInKeywords] = useState([]);\r\n    const [visitLetters, setVisitLetters] = useState({});\r\n    const [speakersById,setSpeakersById] = useState({});\r\n    \r\n    useEffect(async()=>{\r\n        \r\n        var speakers = {};\r\n        await db.collection('speakers').get()\r\n        .then(function(querySnapshot){\r\n            querySnapshot.forEach(async function(doc){\r\n                speakers[doc.id] = doc.data().surname;\r\n            })\r\n        })\r\n        .catch(function(error){\r\n            alert(\"Some speakers cannot load.\");\r\n        });\r\n\r\n        await db.collection(\"talks\").get()\r\n        .then(function(querySnapshot){\r\n            querySnapshot.forEach(async function(doc){\r\n                let keys = doc.data().keywords;\r\n                let keys_len = keys.length;\r\n                for(let i=0; i<keys_len; i++){\r\n                    // Checo si encuentro una keyword nueva\r\n                    if(!(keys[i] in keywords_aux)){\r\n                        keywords_aux[keys[i]] = []\r\n                    }\r\n                    var idx = doc.data().speaker;\r\n                    keywords_aux[keys[i]].push(\r\n                        [doc.id, speakers[idx], doc.data().date.toDate().getFullYear(), doc.data().video]\r\n                    );   \r\n                }\r\n            });\r\n        })\r\n        .catch(function(error){\r\n            alert(\"Cannot load some talk\")\r\n        });\r\n        setKeywords(keywords_aux);\r\n    },[]);\r\n\r\n    // Al modificar speakers list con el contenido se actualiza\r\n    useEffect(() => {\r\n        handleLettersInKeyWords();\r\n    },[keywords]);\r\n\r\n    // FunciÃ³n que revisa las letras que existen para hacer listas\r\n    function handleLettersInKeyWords(){\r\n        let letterSet = new Set();\r\n        let visitLetters = {};\r\n        let keywordsWithLetter = {};\r\n        for(var k in keywords){\r\n            var letter = k.charAt(0).toUpperCase();\r\n            letterSet.add(letter);\r\n            visitLetters[letter] = false;\r\n            keywordsWithLetter[letter] = [];\r\n        }\r\n        for(var k in keywords){\r\n            var letter = k.charAt(0).toUpperCase() ;\r\n            var copy = {};\r\n            copy[k] = keywords[k];\r\n            keywordsWithLetter[letter].push(copy);\r\n        }\r\n        var auxLetterSet = [...letterSet];\r\n        auxLetterSet.sort();\r\n        setLettersInKeywords(auxLetterSet);\r\n        setVisitLetters(visitLetters);\r\n        setKeywordsListByLatter(keywordsWithLetter); \r\n    }  \r\n\r\n    function listWithLetter(letter){\r\n    \r\n        const listItems = keywordsListByLetter[letter].map(keyword =>\r\n            <li> \r\n            <h5 style={{fontSize: '20px', fontStyle:'normal'}}> \r\n                {Object.keys(keyword).map(function(k) {\r\n                    let result = '';\r\n                    let first = true;    \r\n                    \r\n                    return (\r\n                       <> \r\n                       {k} <br/>\r\n                       {keywords[k].map((data) =>{ \r\n                        return (\r\n                            <>{first ? first=false : ',' } {data[1]} <a href={data[3]} target=\"_blank\">{data[2]}</a>  </>\r\n                        )\r\n                       })} </>    \r\n                    )})}\r\n            </h5>\r\n            </li>\r\n        );\r\n        \r\n        return (\r\n            <ul style={{listStyleType:'none'}}>\r\n                {listItems}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    function listAlphabetical(){\r\n        const listItems = lettersInKeywords.map(letter => \r\n                <li\r\n                    style={{listStyleType:'none'}} > \r\n                    <h1 className={classes.title}> \r\n                        {letter} <MenuOpen\r\n                        onClick={onclickLetter.bind(this, letter)}\r\n                        style={{cursor: 'pointer'}}\r\n                        /> {visitLetters[letter] ? listWithLetter(letter) : null}\r\n                    </h1>\r\n                </li>\r\n        );\r\n        return (\r\n            <ul style={{textAlign: 'left'}}>{listItems}</ul>\r\n        );\r\n    }\r\n\r\n    const [count, setCount] = useState(0);\r\n\r\n    function onclickLetter(letter){\r\n        let newVisit = visitLetters;\r\n        newVisit[letter] = !newVisit[letter];\r\n        setVisitLetters(newVisit);\r\n        setCount(count+1);\r\n    }\r\n\r\n    return(\r\n        <div className={classes.section} > \r\n            {listAlphabetical()}\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}